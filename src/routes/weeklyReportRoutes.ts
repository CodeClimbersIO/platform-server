import { redisClient } from "../redis.ts";
import { Router } from "@oak/oak/router";
import { generatePerformanceReview } from "../services/bigBrotherService.ts";
import { sendWeeklyReportEmail } from "../services/emailService.ts";

const router = new Router();

/**
 * Endpoint that takes a request from a codeclimbers user and sends out a transactional email. 
 * Each user receives just one per week. Records that the email was sent through Loops in a redis db
 * where the key is the email and start date for the week of the email
 */
router.post("/weekly-report", async (ctx) => {
  const { email, startOfWeek, weeklyReport } = await ctx.request.body.json();

  if (!email || !startOfWeek || !weeklyReport) {
    ctx.response.status = 400;
    ctx.response.body = { error: "email, startOfWeek and weeklyReport is required" };
  }

  const key = `weekly-report:${email}:${startOfWeek}`;

  try {
    const emailSent = await redisClient.get(key);
    if (emailSent) {
      ctx.response.status = 429;
      ctx.response.body = { error: "Weekly report already sent for this user" };
    }

    // Send email (implement this function in emailService.ts)
    await sendWeeklyReportEmail(email, weeklyReport);

    // Record that the email was sent
    await redisClient.set(key, JSON.stringify(ctx.request.body));

    ctx.response.body = { message: "Weekly report sent successfully" };
  } catch (error) {
    console.error("Error processing weekly report:", error);
    ctx.response.status = 500;
    ctx.response.body = { error: "Internal server error" };
  }
});

/**
 * Endpoint that takes a request from a codeclimbers user and sends out a transactional email with a performance review generated by an llm. 
 * Each user receives just one per week. Records that the email was sent through Loops in a redis db
 * where the key is the email and start date for the week of the email
 */
router.post("/ai-weekly-report", async (ctx) => {
  const { email, startOfWeek, weeklyReport } = await ctx.request.body.json();

  if (!email || !startOfWeek || !weeklyReport) {
    ctx.response.status = 400;
    ctx.response.body = { error: "email, startOfWeek and weeklyReport is required" };
  }

  const key = `ai-weekly-report:${email}:${startOfWeek}`;

  try {
    const emailSent = await redisClient.get(key);
    if (emailSent) {
      ctx.response.status = 429;
      ctx.response.body = { error: "AI weekly report already sent for this user" };
    }

    const performanceReview = await generatePerformanceReview(weeklyReport);
    // Send email (implement this function in emailService.ts)
    // await sendWeeklyReportEmail(email, weeklyReport, performanceReview);

    // Record that the email was sent
    // await redisClient.set(key, JSON.stringify(ctx.request.body));

    ctx.response.body = { message: "Weekly report sent successfully" };
  } catch (error) {
    console.error("Error processing weekly report:", error);
    ctx.response.status = 500;
    ctx.response.body = { error: "Internal server error" };
  }
});

export const weeklyReportRouter = router;